
Паттерн "Мост" (Bridge) является структурным паттерном проектирования, который позволяет разделять абстракцию и реализацию так, чтобы они могли изменяться независимо друг от друга.
Этот паттерн полезен, когда есть множество вариантов абстракций и реализаций, и каждая комбинация этих вариантов должна быть рассмотрена.

Давайте рассмотрим пример использования паттерна "Мост".
Представьте, что у нас есть система для отправки сообщений, и нам нужно обеспечить возможность отправки сообщений разными способами
(например, через электронную почту или SMS).

Пример реализации паттерна "Мост":
-----------------------------------


1). Создание интерфейса MessageSender и его конкретных реализаций:
-----------------------------------------------------------------

Создаем интерфейс MessageSender, который объявляет метод sendMessage(String message), отвечающий за отправку сообщения.
Создаем две конкретные реализации EmailMessageSender и SmsMessageSender, которые реализуют метод sendMessage для отправки сообщений по электронной почте и через SMS соответственно.

2). Создание абстракции Message и его конкретных реализаций:
------------------------------------------------------------

Создаем абстрактный класс Message, который имеет поле типа MessageSender и объявляет абстрактный метод send().
Создаем две конкретные реализации TextMessage и AttachmentMessage, которые наследуются от Message и реализуют метод send в соответствии с типом сообщения.

3). Использование паттерна "Мост":
----------------------------------

Создаем экземпляры конкретных реализаций MessageSender (например, emailSender и smsSender).
Создаем экземпляры конкретных реализаций Message (например, textEmailMessage и attachmentSmsMessage), передавая им соответствующие MessageSender.
Вызываем метод send() на созданных объектах Message, и сообщения будут отправлены с использованием соответствующих способов отправки.


Этот пример демонстрирует, как паттерн "Мост" позволяет разделить абстракцию (тип сообщения) от ее реализации (способ отправки).
Это делает систему более гибкой, так как мы можем добавлять новые типы сообщений и способы отправки независимо друг от друга.