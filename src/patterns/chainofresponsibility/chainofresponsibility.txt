Паттерн "Chain of Responsibility" (Цепочка обязанностей)

Относится к категории паттернов поведения и используется для организации обработки запросов в цепочке объектов-обработчиков.
Каждый объект в цепочке имеет возможность обработать запрос или передать его дальше по цепочке.

Цель паттерна:
----------------------

Позволить нескольким объектам обработать запрос, не задавая явно, какой объект должен обработать какой запрос.

Применение паттерна:
--------------------

Когда есть несколько объектов, которые могут обработать запрос, и порядок обработки не имеет значения.
Когда вы хотите, чтобы запросы автоматически передавались вверх или вниз по цепочке объектов.
Когда вы не знаете, какой объект конкретно может обработать запрос, и хотите, чтобы он нашел свой путь самостоятельно.

Пример ситуации:
----------------

Представьте, что у вас есть система логирования с несколькими уровнями логов: INFO, WARNING и ERROR. Вы хотите, чтобы каждое сообщение логирования обрабатывалось на разных уровнях.
Если уровень логирования ниже заданного, сообщение будет обработано; в противном случае оно будет передано на следующий уровень.

Преимущества паттерна:
----------------------

Убирает жесткую зависимость между отправителем запроса и его получателем.
Позволяет добавлять и изменять обработчики запросов без изменения кода отправителя.
Повышает гибкость и расширяемость кода.

Недостатки паттерна:
----------------------

Запрос может не быть обработан ни одним обработчиком, что потребует заранее предусмотреть какой-то базовый обработчик в цепочке.

---------------------------------------------------------------------------------------------------


В этом примере RequestHandler - это абстрактный класс, который представляет обработчик в цепочке.

Конкретные обработчики (ConcreteHandler1, ConcreteHandler2, ConcreteHandler3) определяют, какой тип запроса они могут обработать.

Если обработчик не может обработать запрос, он передает его следующему обработчику в цепочке.