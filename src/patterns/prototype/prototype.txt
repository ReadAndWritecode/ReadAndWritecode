Шаблон проектирования "Прототип" (Prototype)

Предназначен для создания новых объектов путем копирования существующих объектов, называемых прототипами.

Он относится к категории порождающих шаблонов, так как предоставляет механизм создания объектов класса,
способствуя уменьшению затрат на создание объектов.

В Java, интерфейс Cloneable и метод clone() играют ключевую роль в реализации шаблона Прототип.
Принцип работы прост: объекты создаются на основе существующего объекта (прототипа) путем клонирования.

-----------------------------------------------------------------------------------------------------------

В примере мы использовали интерфейс Cloneable и переопределили метод clone() в классе ConcretePrototype.
Метод clone() возвращает новый объект, являющийся поверхностной копией текущего объекта.
Важно отметить, что метод clone() возвращает Object, поэтому мы приводим результат к типу Prototype.

Также добавлен метод displayInfo(), который выводит информацию о свойстве объекта.

------------------------------------------------------------------------------------------------------------

В конечном итоге мы создаем прототип, клонируем его, проверяем, что свойства одинаковы,
и демонстрируем, что изменение свойства в клоне не влияет на оригинал.

------------------------------------------------------------------------------------------------------------
а почему Cloneable ?

Интерфейс Cloneable в Java предназначен для указания того, что объект может быть клонирован с использованием метода clone().
Он является маркерным интерфейсом, не содержащим методов, и служит индикатором для системы Java, что класс,
реализующий этот интерфейс, предназначен для поддержки клонирования.

Основное преимущество интерфейса Cloneable заключается в том, что он предоставляет информацию для метода clone() в классе,
указывая, что объект этого класса может быть клонирован.
Если класс не реализует интерфейс Cloneable, и попытаться вызвать метод clone() для объекта этого класса,
то будет сгенерировано исключение CloneNotSupportedException.

В примере мы решили воспользоваться интерфейсом Cloneable, чтобы подчеркнуть, что объекты класса ConcretePrototype могут быть клонированы.
Однако, стоит отметить, что использование clone() и Cloneable может вызывать некоторые проблемы, так как метод clone() возвращает Object,
и не всегда обеспечивает полноценное глубокое копирование (особенно если объект содержит ссылки на другие объекты).

В более сложных сценариях рекомендуется рассмотреть альтернативные подходы к клонированию,
которые могут предоставить более надежный механизм клонирования.