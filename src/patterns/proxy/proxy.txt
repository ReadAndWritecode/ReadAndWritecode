Шаблон "Прокси" (Proxy) или "Заместитель" (Surrogate)

- это структурный шаблон проектирования,
который используется для управления доступом к другому объекту.
Этот паттерн предоставляет заместителю суррогатный объект для контроля доступа к другому объекту, не раскрывая полной функциональности этого объекта.

Важной особенностью шаблона Прокси является то, что он позволяет создавать промежуточный уровень управления между клиентом и реальным объектом.

Вот ключевые понятия и примеры использования шаблона Прокси в Java:

Основные участники шаблона Прокси:
--------------------------------------

Субъект (Subject):
Это интерфейс или абстрактный класс, который определяет общие операции, которые реальный объект и прокси должны поддерживать.
Субъект может быть общим для реального объекта и прокси.

Реальный объект (Real Subject):
Это реальный объект, для которого создается прокси.
Реальный объект выполняет фактическую работу и реализует интерфейс субъекта.

Прокси (Proxy):
Это объект, который выступает в роли посредника между клиентом и реальным объектом.
Прокси реализует тот же интерфейс, что и реальный объект, и может выполнять дополнительные функции,
такие как контроль доступа, кэширование, ленивая инициализация и т. д.
Прокси передает запросы от клиента реальному объекту и может вмешиваться в выполнение этих запросов.

    Зачем используется:
    -------------------

 Защита реального объекта: Прокси может контролировать доступ к реальному объекту, проверять права доступа и аутентификацию.
 Ленивая загрузка (Lazy Loading): Прокси может отложить создание и инициализацию реального объекта до тех пор, пока это необходимо.
 Удаленный доступ (Remote Proxy): Прокси может представлять удаленный объект и обеспечивать взаимодействие с ним через сеть.
 Кеширование: Прокси может кешировать результаты операций для оптимизации производительности.

    Примеры:
 ----------------

 Виртуальный прокси: Отложенная загрузка объекта (например, изображения) до момента его реального использования.

 Защитный прокси: Проверка прав доступа перед выполнением операции над реальным объектом.

 Кеширующий прокси: Хранение результатов выполненных операций и возврат их, если запрос повторяется.

 --------------------------------------------------------------------------------------------------

 В этом примере(виртуальный прокси) мы имеем интерфейс Image, который предоставляет метод display().
 У нас есть реальный объект RealImage, который загружает изображение с диска,
 и прокси ProxyImage,
 который загружает реальное изображение только при вызове метода display().

 Это позволяет отложить загрузку изображения с сервера до момента его фактического отображения,
 что может быть полезно для оптимизации ресурсов и ускорения работы приложения.