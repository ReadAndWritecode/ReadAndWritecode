Как определить Immutable объект:

    Класс final:

    Отсутствие setter методов:

    Класс не должен иметь методов, которые изменяют состояние полей.

    Поля final и private:

    Поля класса должны быть объявлены как final и private, чтобы предотвратить изменение их значений после создания объекта.

    Неизменяемые поля:

    Если поля класса являются объектами, то они также должны быть Immutable или быть представлены неизменяемыми значениями.

    -----------------------------------------------------------------------------------------------------------------------

Использование Immutable объектов:

    Потокобезопасность:

    Immutable объекты подходят для использования в многопоточных средах, так как их состояние не может измениться после создания, избегая проблем конкурентного доступа к данным.

    Ключи в коллекциях:

    Использование Immutable объектов в качестве ключей в хеш-таблицах (например, HashMap) обеспечивает стабильность хеш-значений и предотвращает случайные изменения ключей.

    Кэширование:

    Immutable объекты можно кэшировать, так как их значения не изменятся и не потребуется обновление кэша.

    -----------------------------------------------------------------------------------------------------------------------

    Пример класса ImmutableUser соответствует этим критериям:

    он не имеет методов для изменения полей, поля объявлены как final и private, и класс не содержит изменяемых составных объектов.

    пример с ImmutableUser позволяет использовать объект в качестве ключа в коллекции, такой как Map.

    Так как объект Immutable, его состояние не может измениться, и это гарантирует стабильность хеш-кода и поведения ключа в коллекции.